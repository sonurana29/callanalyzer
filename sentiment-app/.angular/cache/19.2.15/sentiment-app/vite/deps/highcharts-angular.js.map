{
  "version": 3,
  "sources": ["../../../../../../node_modules/highcharts-angular/fesm2022/highcharts-angular.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, signal, inject, Injectable, effect, input, model, output, DestroyRef, ElementRef, PLATFORM_ID, computed, untracked, afterRenderEffect, Directive, ChangeDetectionStrategy, Component, makeEnvironmentProviders } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nconst HIGHCHARTS_LOADER = new InjectionToken('HIGHCHARTS_LOADER');\nconst HIGHCHARTS_ROOT_MODULES = new InjectionToken('HIGHCHARTS_ROOT_MODULES');\nconst HIGHCHARTS_OPTIONS = new InjectionToken('HIGHCHARTS_OPTIONS');\nconst HIGHCHARTS_CONFIG = new InjectionToken('HIGHCHARTS_CONFIG');\nclass HighchartsChartService {\n  constructor() {\n    this.writableHighcharts = signal(null);\n    this.highcharts = this.writableHighcharts.asReadonly();\n    this.loader = inject(HIGHCHARTS_LOADER);\n    this.globalOptions = inject(HIGHCHARTS_OPTIONS, {\n      optional: true\n    });\n    this.globalModules = inject(HIGHCHARTS_ROOT_MODULES, {\n      optional: true\n    });\n  }\n  async loadHighchartsWithModules(partialConfig) {\n    const highcharts = await this.loader(); // Ensure Highcharts core is loaded\n    await Promise.all([...(this.globalModules?.() ?? []), ...(partialConfig?.modules?.() ?? [])]);\n    // Return the Highcharts instance\n    return highcharts;\n  }\n  load(partialConfig) {\n    this.loadHighchartsWithModules(partialConfig).then(highcharts => {\n      if (this.globalOptions) {\n        highcharts.setOptions(this.globalOptions);\n      }\n      // add timeout to make sure the loader has attached all modules\n      setTimeout(() => this.writableHighcharts.set(highcharts), 100);\n    });\n  }\n  static {\n    this.ɵfac = function HighchartsChartService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HighchartsChartService)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HighchartsChartService,\n      factory: HighchartsChartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HighchartsChartService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass HighchartsChartDirective {\n  keepChartUpToDate() {\n    effect(() => {\n      this.update();\n      this.chart()?.update(this.options(), true, this.oneToOne());\n    });\n  }\n  destroyChart() {\n    const chart = this.chart();\n    if (chart) {\n      // #56\n      chart.destroy();\n    }\n  }\n  constructor() {\n    /**\n     * Type of the chart constructor.\n     */\n    this.constructorType = input('chart');\n    /**\n     * When enabled, Updates `series`, `xAxis`, `yAxis`, and `annotations` to match new options.\n     * Items are added/removed as needed. Series with `id`s are matched by `id`;\n     * unmatched items are removed. Omitted `series` leaves existing ones unchanged.\n     */\n    this.oneToOne = input(false);\n    /**\n     * Options for the Highcharts chart.\n     */\n    this.options = input.required();\n    /**\n     * Whether to redraw the chart.\n     * Check how update works in Highcharts\n     * API doc here: https://api.highcharts.com/class-reference/Highcharts.Chart#update\n     */\n    this.update = model();\n    this.chartInstance = output(); // #26\n    this.destroyRef = inject(DestroyRef);\n    this.el = inject(ElementRef);\n    this.platformId = inject(PLATFORM_ID);\n    this.relativeConfig = inject(HIGHCHARTS_CONFIG, {\n      optional: true\n    });\n    this.highchartsChartService = inject(HighchartsChartService);\n    this.constructorChart = computed(() => {\n      const highCharts = this.highchartsChartService.highcharts();\n      if (highCharts) {\n        return highCharts[this.constructorType()];\n      }\n      return undefined;\n    });\n    // Create the chart as soon as we can\n    this.chart = computed(() => {\n      return this.constructorChart()?.(this.el.nativeElement,\n      // Use untracked, so we don't re-create new chart everytime options change\n      untracked(() => this.options()),\n      // Use Highcharts callback to emit chart instance, so it is available as early\n      // as possible. So that Angular is already aware of the instance if Highcharts raise\n      // events during the initialization that happens before coming back to Angular\n      createdChart => this.chartInstance.emit(createdChart));\n    });\n    // should stop loading on the server side for SSR\n    if (this.platformId && isPlatformServer(this.platformId)) {\n      return;\n    }\n    // make sure to load global config + modules on demand\n    this.highchartsChartService.load(this.relativeConfig);\n    this.destroyRef.onDestroy(() => this.destroyChart()); // #44\n    afterRenderEffect(() => {\n      if (this.update()) {\n        this.update.set(false); // clear the flag after update\n      }\n    });\n    // Keep the chart up to date whenever options change or the update special input is set to true\n    this.keepChartUpToDate();\n  }\n  static {\n    this.ɵfac = function HighchartsChartDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HighchartsChartDirective)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: HighchartsChartDirective,\n      selectors: [[\"\", \"highchartsChart\", \"\"]],\n      inputs: {\n        constructorType: [1, \"constructorType\"],\n        oneToOne: [1, \"oneToOne\"],\n        options: [1, \"options\"],\n        update: [1, \"update\"]\n      },\n      outputs: {\n        update: \"updateChange\",\n        chartInstance: \"chartInstance\"\n      }\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HighchartsChartDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[highchartsChart]'\n    }]\n  }], () => [], null);\n})();\nclass HighchartsChartComponent {\n  static {\n    this.ɵfac = function HighchartsChartComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HighchartsChartComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: HighchartsChartComponent,\n      selectors: [[\"highcharts-chart\"]],\n      features: [i0.ɵɵHostDirectivesFeature([{\n        directive: HighchartsChartDirective,\n        inputs: [\"constructorType\", \"constructorType\", \"oneToOne\", \"oneToOne\", \"options\", \"options\", \"update\", \"update\"],\n        outputs: [\"chartInstance\", \"chartInstance\", \"updateChange\", \"updateChange\"]\n      }])],\n      decls: 0,\n      vars: 0,\n      template: function HighchartsChartComponent_Template(rf, ctx) {},\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HighchartsChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'highcharts-chart',\n      template: '',\n      hostDirectives: [{\n        directive: HighchartsChartDirective,\n        inputs: ['constructorType', 'oneToOne', 'options', 'update'],\n        outputs: ['chartInstance', 'updateChange']\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, null);\n})();\nconst emptyModuleFactoryFunction = () => [];\nconst defaultInstanceFactoryFunction = () => import('highcharts/esm/highcharts').then(m => m.default);\nfunction provideHighchartsInstance(instance) {\n  return makeEnvironmentProviders([{\n    provide: HIGHCHARTS_LOADER,\n    useValue: instance ?? defaultInstanceFactoryFunction\n  }]);\n}\nfunction provideHighchartsOptions(options) {\n  return makeEnvironmentProviders([{\n    provide: HIGHCHARTS_OPTIONS,\n    useValue: options\n  }]);\n}\nfunction provideHighchartsRootModules(modules) {\n  return makeEnvironmentProviders([{\n    provide: HIGHCHARTS_ROOT_MODULES,\n    useValue: modules\n  }]);\n}\nfunction providePartialHighcharts(config) {\n  return {\n    provide: HIGHCHARTS_CONFIG,\n    useValue: config\n  };\n}\nfunction provideHighcharts(config = {}) {\n  const providers = [provideHighchartsInstance(config.instance), provideHighchartsRootModules(config.modules ?? emptyModuleFactoryFunction)];\n  if (config.options) {\n    providers.push(provideHighchartsOptions(config.options));\n  }\n  return makeEnvironmentProviders(providers);\n}\n\n/*\n * Public API Surface of highcharts-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HighchartsChartComponent, HighchartsChartDirective, provideHighcharts, providePartialHighcharts };\n"],
  "mappings": "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",
  "names": []
}
