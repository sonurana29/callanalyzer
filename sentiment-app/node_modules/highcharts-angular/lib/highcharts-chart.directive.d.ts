import { ChartConstructorType } from './types';
import type Highcharts from 'highcharts/esm/highcharts';
import * as i0 from "@angular/core";
export declare class HighchartsChartDirective {
    /**
     * Type of the chart constructor.
     */
    readonly constructorType: import("@angular/core").InputSignal<ChartConstructorType>;
    /**
     * When enabled, Updates `series`, `xAxis`, `yAxis`, and `annotations` to match new options.
     * Items are added/removed as needed. Series with `id`s are matched by `id`;
     * unmatched items are removed. Omitted `series` leaves existing ones unchanged.
     */
    readonly oneToOne: import("@angular/core").InputSignal<boolean>;
    /**
     * Options for the Highcharts chart.
     */
    readonly options: import("@angular/core").InputSignal<Highcharts.Options>;
    /**
     * Whether to redraw the chart.
     * Check how update works in Highcharts
     * API doc here: https://api.highcharts.com/class-reference/Highcharts.Chart#update
     */
    readonly update: import("@angular/core").ModelSignal<boolean | undefined>;
    readonly chartInstance: import("@angular/core").OutputEmitterRef<Highcharts.Chart>;
    private readonly destroyRef;
    private readonly el;
    private readonly platformId;
    private readonly relativeConfig;
    private readonly highchartsChartService;
    private readonly constructorChart;
    private readonly chart;
    private keepChartUpToDate;
    private destroyChart;
    constructor();
    static ɵfac: i0.ɵɵFactoryDeclaration<HighchartsChartDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<HighchartsChartDirective, "[highchartsChart]", never, { "constructorType": { "alias": "constructorType"; "required": false; "isSignal": true; }; "oneToOne": { "alias": "oneToOne"; "required": false; "isSignal": true; }; "options": { "alias": "options"; "required": true; "isSignal": true; }; "update": { "alias": "update"; "required": false; "isSignal": true; }; }, { "update": "updateChange"; "chartInstance": "chartInstance"; }, never, never, true, never>;
}
